/*
Copyright 2023 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	common "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ComponentDefinitionSpecApplyConfiguration represents an declarative configuration of the ComponentDefinitionSpec type for use
// with apply.
type ComponentDefinitionSpecApplyConfiguration struct {
	Version            *string                        `json:"version,omitempty"`
	Workload           *common.WorkloadTypeDescriptor `json:"workload,omitempty"`
	ChildResourceKinds []common.ChildResourceKind     `json:"childResourceKinds,omitempty"`
	RevisionLabel      *string                        `json:"revisionLabel,omitempty"`
	PodSpecPath        *string                        `json:"podSpecPath,omitempty"`
	Status             *common.Status                 `json:"status,omitempty"`
	Schematic          *common.Schematic              `json:"schematic,omitempty"`
	Extension          *runtime.RawExtension          `json:"extension,omitempty"`
}

// ComponentDefinitionSpecApplyConfiguration constructs an declarative configuration of the ComponentDefinitionSpec type for use with
// apply.
func ComponentDefinitionSpec() *ComponentDefinitionSpecApplyConfiguration {
	return &ComponentDefinitionSpecApplyConfiguration{}
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *ComponentDefinitionSpecApplyConfiguration) WithVersion(value string) *ComponentDefinitionSpecApplyConfiguration {
	b.Version = &value
	return b
}

// WithWorkload sets the Workload field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workload field is set to the value of the last call.
func (b *ComponentDefinitionSpecApplyConfiguration) WithWorkload(value common.WorkloadTypeDescriptor) *ComponentDefinitionSpecApplyConfiguration {
	b.Workload = &value
	return b
}

// WithChildResourceKinds adds the given value to the ChildResourceKinds field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ChildResourceKinds field.
func (b *ComponentDefinitionSpecApplyConfiguration) WithChildResourceKinds(values ...common.ChildResourceKind) *ComponentDefinitionSpecApplyConfiguration {
	for i := range values {
		b.ChildResourceKinds = append(b.ChildResourceKinds, values[i])
	}
	return b
}

// WithRevisionLabel sets the RevisionLabel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RevisionLabel field is set to the value of the last call.
func (b *ComponentDefinitionSpecApplyConfiguration) WithRevisionLabel(value string) *ComponentDefinitionSpecApplyConfiguration {
	b.RevisionLabel = &value
	return b
}

// WithPodSpecPath sets the PodSpecPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodSpecPath field is set to the value of the last call.
func (b *ComponentDefinitionSpecApplyConfiguration) WithPodSpecPath(value string) *ComponentDefinitionSpecApplyConfiguration {
	b.PodSpecPath = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *ComponentDefinitionSpecApplyConfiguration) WithStatus(value common.Status) *ComponentDefinitionSpecApplyConfiguration {
	b.Status = &value
	return b
}

// WithSchematic sets the Schematic field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schematic field is set to the value of the last call.
func (b *ComponentDefinitionSpecApplyConfiguration) WithSchematic(value common.Schematic) *ComponentDefinitionSpecApplyConfiguration {
	b.Schematic = &value
	return b
}

// WithExtension sets the Extension field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Extension field is set to the value of the last call.
func (b *ComponentDefinitionSpecApplyConfiguration) WithExtension(value runtime.RawExtension) *ComponentDefinitionSpecApplyConfiguration {
	b.Extension = &value
	return b
}
