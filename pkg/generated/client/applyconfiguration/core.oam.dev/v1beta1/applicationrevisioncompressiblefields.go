/*
Copyright 2023 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	apiv1alpha1 "github.com/kubevela/workflow/api/v1alpha1"
	common "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	v1alpha1 "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1alpha1"
	coreoamdevv1beta1 "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
)

// ApplicationRevisionCompressibleFieldsApplyConfiguration represents an declarative configuration of the ApplicationRevisionCompressibleFields type for use
// with apply.
type ApplicationRevisionCompressibleFieldsApplyConfiguration struct {
	Application             *ApplicationApplyConfiguration                       `json:"application,omitempty"`
	ComponentDefinitions    map[string]*coreoamdevv1beta1.ComponentDefinition    `json:"componentDefinitions,omitempty"`
	WorkloadDefinitions     map[string]WorkloadDefinitionApplyConfiguration      `json:"workloadDefinitions,omitempty"`
	TraitDefinitions        map[string]*coreoamdevv1beta1.TraitDefinition        `json:"traitDefinitions,omitempty"`
	PolicyDefinitions       map[string]PolicyDefinitionApplyConfiguration        `json:"policyDefinitions,omitempty"`
	WorkflowStepDefinitions map[string]*coreoamdevv1beta1.WorkflowStepDefinition `json:"workflowStepDefinitions,omitempty"`
	Policies                map[string]v1alpha1.Policy                           `json:"policies,omitempty"`
	Workflow                *apiv1alpha1.Workflow                                `json:"workflow,omitempty"`
	ReferredObjects         []common.ReferredObject                              `json:"referredObjects,omitempty"`
}

// ApplicationRevisionCompressibleFieldsApplyConfiguration constructs an declarative configuration of the ApplicationRevisionCompressibleFields type for use with
// apply.
func ApplicationRevisionCompressibleFields() *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	return &ApplicationRevisionCompressibleFieldsApplyConfiguration{}
}

// WithApplication sets the Application field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Application field is set to the value of the last call.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithApplication(value *ApplicationApplyConfiguration) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	b.Application = value
	return b
}

// WithComponentDefinitions puts the entries into the ComponentDefinitions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ComponentDefinitions field,
// overwriting an existing map entries in ComponentDefinitions field with the same key.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithComponentDefinitions(entries map[string]*coreoamdevv1beta1.ComponentDefinition) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	if b.ComponentDefinitions == nil && len(entries) > 0 {
		b.ComponentDefinitions = make(map[string]*coreoamdevv1beta1.ComponentDefinition, len(entries))
	}
	for k, v := range entries {
		b.ComponentDefinitions[k] = v
	}
	return b
}

// WithWorkloadDefinitions puts the entries into the WorkloadDefinitions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the WorkloadDefinitions field,
// overwriting an existing map entries in WorkloadDefinitions field with the same key.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithWorkloadDefinitions(entries map[string]WorkloadDefinitionApplyConfiguration) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	if b.WorkloadDefinitions == nil && len(entries) > 0 {
		b.WorkloadDefinitions = make(map[string]WorkloadDefinitionApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.WorkloadDefinitions[k] = v
	}
	return b
}

// WithTraitDefinitions puts the entries into the TraitDefinitions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the TraitDefinitions field,
// overwriting an existing map entries in TraitDefinitions field with the same key.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithTraitDefinitions(entries map[string]*coreoamdevv1beta1.TraitDefinition) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	if b.TraitDefinitions == nil && len(entries) > 0 {
		b.TraitDefinitions = make(map[string]*coreoamdevv1beta1.TraitDefinition, len(entries))
	}
	for k, v := range entries {
		b.TraitDefinitions[k] = v
	}
	return b
}

// WithPolicyDefinitions puts the entries into the PolicyDefinitions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PolicyDefinitions field,
// overwriting an existing map entries in PolicyDefinitions field with the same key.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithPolicyDefinitions(entries map[string]PolicyDefinitionApplyConfiguration) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	if b.PolicyDefinitions == nil && len(entries) > 0 {
		b.PolicyDefinitions = make(map[string]PolicyDefinitionApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.PolicyDefinitions[k] = v
	}
	return b
}

// WithWorkflowStepDefinitions puts the entries into the WorkflowStepDefinitions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the WorkflowStepDefinitions field,
// overwriting an existing map entries in WorkflowStepDefinitions field with the same key.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithWorkflowStepDefinitions(entries map[string]*coreoamdevv1beta1.WorkflowStepDefinition) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	if b.WorkflowStepDefinitions == nil && len(entries) > 0 {
		b.WorkflowStepDefinitions = make(map[string]*coreoamdevv1beta1.WorkflowStepDefinition, len(entries))
	}
	for k, v := range entries {
		b.WorkflowStepDefinitions[k] = v
	}
	return b
}

// WithPolicies puts the entries into the Policies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Policies field,
// overwriting an existing map entries in Policies field with the same key.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithPolicies(entries map[string]v1alpha1.Policy) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	if b.Policies == nil && len(entries) > 0 {
		b.Policies = make(map[string]v1alpha1.Policy, len(entries))
	}
	for k, v := range entries {
		b.Policies[k] = v
	}
	return b
}

// WithWorkflow sets the Workflow field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workflow field is set to the value of the last call.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithWorkflow(value apiv1alpha1.Workflow) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	b.Workflow = &value
	return b
}

// WithReferredObjects adds the given value to the ReferredObjects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ReferredObjects field.
func (b *ApplicationRevisionCompressibleFieldsApplyConfiguration) WithReferredObjects(values ...common.ReferredObject) *ApplicationRevisionCompressibleFieldsApplyConfiguration {
	for i := range values {
		b.ReferredObjects = append(b.ReferredObjects, values[i])
	}
	return b
}
