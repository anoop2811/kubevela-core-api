/*
Copyright 2023 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	common "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
)

// ApplicationRevisionStatusApplyConfiguration represents an declarative configuration of the ApplicationRevisionStatus type for use
// with apply.
type ApplicationRevisionStatusApplyConfiguration struct {
	Succeeded       *bool                  `json:"succeeded,omitempty"`
	Workflow        *common.WorkflowStatus `json:"workflow,omitempty"`
	WorkflowContext map[string]string      `json:"workflowContext,omitempty"`
}

// ApplicationRevisionStatusApplyConfiguration constructs an declarative configuration of the ApplicationRevisionStatus type for use with
// apply.
func ApplicationRevisionStatus() *ApplicationRevisionStatusApplyConfiguration {
	return &ApplicationRevisionStatusApplyConfiguration{}
}

// WithSucceeded sets the Succeeded field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Succeeded field is set to the value of the last call.
func (b *ApplicationRevisionStatusApplyConfiguration) WithSucceeded(value bool) *ApplicationRevisionStatusApplyConfiguration {
	b.Succeeded = &value
	return b
}

// WithWorkflow sets the Workflow field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workflow field is set to the value of the last call.
func (b *ApplicationRevisionStatusApplyConfiguration) WithWorkflow(value common.WorkflowStatus) *ApplicationRevisionStatusApplyConfiguration {
	b.Workflow = &value
	return b
}

// WithWorkflowContext puts the entries into the WorkflowContext field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the WorkflowContext field,
// overwriting an existing map entries in WorkflowContext field with the same key.
func (b *ApplicationRevisionStatusApplyConfiguration) WithWorkflowContext(entries map[string]string) *ApplicationRevisionStatusApplyConfiguration {
	if b.WorkflowContext == nil && len(entries) > 0 {
		b.WorkflowContext = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.WorkflowContext[k] = v
	}
	return b
}
