/*
Copyright 2023 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	common "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/common"
	v1beta1 "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// TraitDefinitionSpecApplyConfiguration represents an declarative configuration of the TraitDefinitionSpec type for use
// with apply.
type TraitDefinitionSpecApplyConfiguration struct {
	Reference          *common.DefinitionReference `json:"definitionRef,omitempty"`
	RevisionEnabled    *bool                       `json:"revisionEnabled,omitempty"`
	WorkloadRefPath    *string                     `json:"workloadRefPath,omitempty"`
	PodDisruptive      *bool                       `json:"podDisruptive,omitempty"`
	AppliesToWorkloads []string                    `json:"appliesToWorkloads,omitempty"`
	ConflictsWith      []string                    `json:"conflictsWith,omitempty"`
	Schematic          *common.Schematic           `json:"schematic,omitempty"`
	Status             *common.Status              `json:"status,omitempty"`
	Extension          *runtime.RawExtension       `json:"extension,omitempty"`
	ManageWorkload     *bool                       `json:"manageWorkload,omitempty"`
	ControlPlaneOnly   *bool                       `json:"controlPlaneOnly,omitempty"`
	Stage              *v1beta1.StageType          `json:"stage,omitempty"`
	Version            *string                     `json:"version,omitempty"`
}

// TraitDefinitionSpecApplyConfiguration constructs an declarative configuration of the TraitDefinitionSpec type for use with
// apply.
func TraitDefinitionSpec() *TraitDefinitionSpecApplyConfiguration {
	return &TraitDefinitionSpecApplyConfiguration{}
}

// WithReference sets the Reference field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reference field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithReference(value common.DefinitionReference) *TraitDefinitionSpecApplyConfiguration {
	b.Reference = &value
	return b
}

// WithRevisionEnabled sets the RevisionEnabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RevisionEnabled field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithRevisionEnabled(value bool) *TraitDefinitionSpecApplyConfiguration {
	b.RevisionEnabled = &value
	return b
}

// WithWorkloadRefPath sets the WorkloadRefPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadRefPath field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithWorkloadRefPath(value string) *TraitDefinitionSpecApplyConfiguration {
	b.WorkloadRefPath = &value
	return b
}

// WithPodDisruptive sets the PodDisruptive field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodDisruptive field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithPodDisruptive(value bool) *TraitDefinitionSpecApplyConfiguration {
	b.PodDisruptive = &value
	return b
}

// WithAppliesToWorkloads adds the given value to the AppliesToWorkloads field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AppliesToWorkloads field.
func (b *TraitDefinitionSpecApplyConfiguration) WithAppliesToWorkloads(values ...string) *TraitDefinitionSpecApplyConfiguration {
	for i := range values {
		b.AppliesToWorkloads = append(b.AppliesToWorkloads, values[i])
	}
	return b
}

// WithConflictsWith adds the given value to the ConflictsWith field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConflictsWith field.
func (b *TraitDefinitionSpecApplyConfiguration) WithConflictsWith(values ...string) *TraitDefinitionSpecApplyConfiguration {
	for i := range values {
		b.ConflictsWith = append(b.ConflictsWith, values[i])
	}
	return b
}

// WithSchematic sets the Schematic field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schematic field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithSchematic(value common.Schematic) *TraitDefinitionSpecApplyConfiguration {
	b.Schematic = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithStatus(value common.Status) *TraitDefinitionSpecApplyConfiguration {
	b.Status = &value
	return b
}

// WithExtension sets the Extension field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Extension field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithExtension(value runtime.RawExtension) *TraitDefinitionSpecApplyConfiguration {
	b.Extension = &value
	return b
}

// WithManageWorkload sets the ManageWorkload field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ManageWorkload field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithManageWorkload(value bool) *TraitDefinitionSpecApplyConfiguration {
	b.ManageWorkload = &value
	return b
}

// WithControlPlaneOnly sets the ControlPlaneOnly field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControlPlaneOnly field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithControlPlaneOnly(value bool) *TraitDefinitionSpecApplyConfiguration {
	b.ControlPlaneOnly = &value
	return b
}

// WithStage sets the Stage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Stage field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithStage(value v1beta1.StageType) *TraitDefinitionSpecApplyConfiguration {
	b.Stage = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *TraitDefinitionSpecApplyConfiguration) WithVersion(value string) *TraitDefinitionSpecApplyConfiguration {
	b.Version = &value
	return b
}
