/*
Copyright 2023 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
)

// ResourceTrackerSpecApplyConfiguration represents an declarative configuration of the ResourceTrackerSpec type for use
// with apply.
type ResourceTrackerSpecApplyConfiguration struct {
	Type                  *v1beta1.ResourceTrackerType                  `json:"type,omitempty"`
	ApplicationGeneration *int64                                        `json:"applicationGeneration,omitempty"`
	ManagedResources      []ManagedResourceApplyConfiguration           `json:"managedResources,omitempty"`
	Compression           *ResourceTrackerCompressionApplyConfiguration `json:"compression,omitempty"`
}

// ResourceTrackerSpecApplyConfiguration constructs an declarative configuration of the ResourceTrackerSpec type for use with
// apply.
func ResourceTrackerSpec() *ResourceTrackerSpecApplyConfiguration {
	return &ResourceTrackerSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ResourceTrackerSpecApplyConfiguration) WithType(value v1beta1.ResourceTrackerType) *ResourceTrackerSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithApplicationGeneration sets the ApplicationGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ApplicationGeneration field is set to the value of the last call.
func (b *ResourceTrackerSpecApplyConfiguration) WithApplicationGeneration(value int64) *ResourceTrackerSpecApplyConfiguration {
	b.ApplicationGeneration = &value
	return b
}

// WithManagedResources adds the given value to the ManagedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ManagedResources field.
func (b *ResourceTrackerSpecApplyConfiguration) WithManagedResources(values ...*ManagedResourceApplyConfiguration) *ResourceTrackerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithManagedResources")
		}
		b.ManagedResources = append(b.ManagedResources, *values[i])
	}
	return b
}

// WithCompression sets the Compression field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Compression field is set to the value of the last call.
func (b *ResourceTrackerSpecApplyConfiguration) WithCompression(value *ResourceTrackerCompressionApplyConfiguration) *ResourceTrackerSpecApplyConfiguration {
	b.Compression = value
	return b
}
